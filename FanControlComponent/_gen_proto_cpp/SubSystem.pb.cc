// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SubSystem.proto

#include "SubSystem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace SubSystemSink {
class empty_paramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<empty_param> _instance;
} _empty_param_default_instance_;
class SubSystemTempDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubSystemTemp> _instance;
} _SubSystemTemp_default_instance_;
}  // namespace SubSystemSink
static void InitDefaultsscc_info_SubSystemTemp_SubSystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubSystemSink::_SubSystemTemp_default_instance_;
    new (ptr) ::SubSystemSink::SubSystemTemp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubSystemSink::SubSystemTemp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubSystemTemp_SubSystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubSystemTemp_SubSystem_2eproto}, {}};

static void InitDefaultsscc_info_empty_param_SubSystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubSystemSink::_empty_param_default_instance_;
    new (ptr) ::SubSystemSink::empty_param();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubSystemSink::empty_param::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_empty_param_SubSystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_empty_param_SubSystem_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SubSystem_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SubSystem_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SubSystem_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SubSystem_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SubSystemSink::empty_param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SubSystemSink::SubSystemTemp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubSystemSink::SubSystemTemp, temp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SubSystemSink::empty_param)},
  { 5, -1, sizeof(::SubSystemSink::SubSystemTemp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubSystemSink::_empty_param_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubSystemSink::_SubSystemTemp_default_instance_),
};

const char descriptor_table_protodef_SubSystem_2eproto[] =
  "\n\017SubSystem.proto\022\rSubSystemSink\"\r\n\013empt"
  "y_param\"\035\n\rSubSystemTemp\022\014\n\004Temp\030\001 \001(\0022a"
  "\n\017SubSystemServer\022N\n\020GetSubSystemTemp\022\032."
  "SubSystemSink.empty_param\032\034.SubSystemSin"
  "k.SubSystemTemp\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SubSystem_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SubSystem_2eproto_sccs[2] = {
  &scc_info_SubSystemTemp_SubSystem_2eproto.base,
  &scc_info_empty_param_SubSystem_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SubSystem_2eproto_once;
static bool descriptor_table_SubSystem_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SubSystem_2eproto = {
  &descriptor_table_SubSystem_2eproto_initialized, descriptor_table_protodef_SubSystem_2eproto, "SubSystem.proto", 185,
  &descriptor_table_SubSystem_2eproto_once, descriptor_table_SubSystem_2eproto_sccs, descriptor_table_SubSystem_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_SubSystem_2eproto::offsets,
  file_level_metadata_SubSystem_2eproto, 2, file_level_enum_descriptors_SubSystem_2eproto, file_level_service_descriptors_SubSystem_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SubSystem_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SubSystem_2eproto), true);
namespace SubSystemSink {

// ===================================================================

void empty_param::InitAsDefaultInstance() {
}
class empty_param::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

empty_param::empty_param()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubSystemSink.empty_param)
}
empty_param::empty_param(const empty_param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SubSystemSink.empty_param)
}

void empty_param::SharedCtor() {
}

empty_param::~empty_param() {
  // @@protoc_insertion_point(destructor:SubSystemSink.empty_param)
  SharedDtor();
}

void empty_param::SharedDtor() {
}

void empty_param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const empty_param& empty_param::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_empty_param_SubSystem_2eproto.base);
  return *internal_default_instance();
}


void empty_param::Clear() {
// @@protoc_insertion_point(message_clear_start:SubSystemSink.empty_param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* empty_param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool empty_param::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubSystemSink.empty_param)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SubSystemSink.empty_param)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubSystemSink.empty_param)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void empty_param::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubSystemSink.empty_param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubSystemSink.empty_param)
}

::PROTOBUF_NAMESPACE_ID::uint8* empty_param::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubSystemSink.empty_param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubSystemSink.empty_param)
  return target;
}

size_t empty_param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubSystemSink.empty_param)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void empty_param::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubSystemSink.empty_param)
  GOOGLE_DCHECK_NE(&from, this);
  const empty_param* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<empty_param>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubSystemSink.empty_param)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubSystemSink.empty_param)
    MergeFrom(*source);
  }
}

void empty_param::MergeFrom(const empty_param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubSystemSink.empty_param)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void empty_param::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubSystemSink.empty_param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void empty_param::CopyFrom(const empty_param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubSystemSink.empty_param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool empty_param::IsInitialized() const {
  return true;
}

void empty_param::Swap(empty_param* other) {
  if (other == this) return;
  InternalSwap(other);
}
void empty_param::InternalSwap(empty_param* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata empty_param::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubSystemTemp::InitAsDefaultInstance() {
}
class SubSystemTemp::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubSystemTemp::kTempFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubSystemTemp::SubSystemTemp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubSystemSink.SubSystemTemp)
}
SubSystemTemp::SubSystemTemp(const SubSystemTemp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  temp_ = from.temp_;
  // @@protoc_insertion_point(copy_constructor:SubSystemSink.SubSystemTemp)
}

void SubSystemTemp::SharedCtor() {
  temp_ = 0;
}

SubSystemTemp::~SubSystemTemp() {
  // @@protoc_insertion_point(destructor:SubSystemSink.SubSystemTemp)
  SharedDtor();
}

void SubSystemTemp::SharedDtor() {
}

void SubSystemTemp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubSystemTemp& SubSystemTemp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubSystemTemp_SubSystem_2eproto.base);
  return *internal_default_instance();
}


void SubSystemTemp::Clear() {
// @@protoc_insertion_point(message_clear_start:SubSystemSink.SubSystemTemp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  temp_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubSystemTemp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float Temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubSystemTemp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubSystemSink.SubSystemTemp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float Temp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubSystemSink.SubSystemTemp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubSystemSink.SubSystemTemp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubSystemTemp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubSystemSink.SubSystemTemp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float Temp = 1;
  if (!(this->temp() <= 0 && this->temp() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->temp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubSystemSink.SubSystemTemp)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubSystemTemp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubSystemSink.SubSystemTemp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float Temp = 1;
  if (!(this->temp() <= 0 && this->temp() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->temp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubSystemSink.SubSystemTemp)
  return target;
}

size_t SubSystemTemp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubSystemSink.SubSystemTemp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float Temp = 1;
  if (!(this->temp() <= 0 && this->temp() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubSystemTemp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubSystemSink.SubSystemTemp)
  GOOGLE_DCHECK_NE(&from, this);
  const SubSystemTemp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubSystemTemp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubSystemSink.SubSystemTemp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubSystemSink.SubSystemTemp)
    MergeFrom(*source);
  }
}

void SubSystemTemp::MergeFrom(const SubSystemTemp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubSystemSink.SubSystemTemp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.temp() <= 0 && from.temp() >= 0)) {
    set_temp(from.temp());
  }
}

void SubSystemTemp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubSystemSink.SubSystemTemp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubSystemTemp::CopyFrom(const SubSystemTemp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubSystemSink.SubSystemTemp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubSystemTemp::IsInitialized() const {
  return true;
}

void SubSystemTemp::Swap(SubSystemTemp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubSystemTemp::InternalSwap(SubSystemTemp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(temp_, other->temp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubSystemTemp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SubSystemSink
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SubSystemSink::empty_param* Arena::CreateMaybeMessage< ::SubSystemSink::empty_param >(Arena* arena) {
  return Arena::CreateInternal< ::SubSystemSink::empty_param >(arena);
}
template<> PROTOBUF_NOINLINE ::SubSystemSink::SubSystemTemp* Arena::CreateMaybeMessage< ::SubSystemSink::SubSystemTemp >(Arena* arena) {
  return Arena::CreateInternal< ::SubSystemSink::SubSystemTemp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
